// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: "config.gradle"
    repositories {
        google()
        jcenter()
        maven { url 'https://www.jitpack.io' }
//        maven {
//            //本地插件地址
//            url uri('./plugins')
//        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath 'com.novoda:bintray-release:0.9.1'
        classpath 'com.didichuxing.doraemonkit:doraemonkit-plugin:1.0.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://www.jitpack.io' }
        maven {
            url 'http://nexuse.qicp.vip/repository/maven-releases/'
        }
        maven {
            url 'http://nexuse.qicp.vip/repository/maven-snapshots/'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//tasks.getByPath(":doraemonkit:javadocRelease").enabled = false
//tasks.getByPath(":doraemonkit-no-op:javadocRelease").enabled = false


def getValueFromRootProperties(String key) {
    File file = rootProject.file('gradle.properties')
    String value = ""
    if (file.exists()) {
        //加载资源
        InputStream inputStream = file.newDataInputStream();
        Properties properties = new Properties()
        properties.load(inputStream)

        if (properties.containsKey(key)) {
            value = properties.getProperty(key)
        }
    }
    return value
}

afterEvaluate {
    rootProject.subprojects { project ->
        project.afterEvaluate {
            dependencies {
                components {
                    all { ComponentMetadataDetails details ->
                        if (details.toString().endsWith("-SNAPSHOT")) {
                            details.changing = true
                        }
                    }
                }
            }
            it.configurations.all {
                resolutionStrategy.cacheChangingModulesFor 0, 'minutes'
            }
        }
    }
}
